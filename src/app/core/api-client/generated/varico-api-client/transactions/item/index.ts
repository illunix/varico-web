// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createExceptionResponseFromDiscriminatorValue, deserializeIntoExceptionResponse, serializeExceptionResponse, type ExceptionResponse } from '../../models/';
import { CategoryRequestBuilder } from './category/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface WithTransactionReferenceItemRequestBuilderDeleteQueryParameters {
    accountReferenceId?: Guid;
}
/**
 * Builds and executes requests for operations under /transactions/{transactionReferenceId}
 */
export class WithTransactionReferenceItemRequestBuilder extends BaseRequestBuilder<WithTransactionReferenceItemRequestBuilder> {
    /**
     * The category property
     */
    public get category(): CategoryRequestBuilder {
        return new CategoryRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new WithTransactionReferenceItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/transactions/{transactionReferenceId}{?accountReferenceId*}", (x, y) => new WithTransactionReferenceItemRequestBuilder(x, y));
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
    public delete(requestConfiguration?: RequestConfiguration<WithTransactionReferenceItemRequestBuilderDeleteQueryParameters> | undefined) : Promise<void> {
        const requestInfo = this.toDeleteRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "400": createExceptionResponseFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<WithTransactionReferenceItemRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.DELETE, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
