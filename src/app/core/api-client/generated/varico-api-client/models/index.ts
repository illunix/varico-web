// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface AccountDto extends Parsable {
    /**
     * The fullName property
     */
    fullName?: string;
    /**
     * The referenceId property
     */
    referenceId?: Guid;
}
export interface AccountSummaryDto extends Parsable {
    /**
     * The fullName property
     */
    fullName?: string;
    /**
     * The totalAmountSpent property
     */
    totalAmountSpent?: number;
    /**
     * The transactions property
     */
    transactions?: AccountTransactionDto[];
}
export interface AccountTransactionDto extends Parsable {
    /**
     * The amount property
     */
    amount?: number;
    /**
     * The category property
     */
    category?: string;
    /**
     * The createdAt property
     */
    createdAt?: Date;
    /**
     * The referenceId property
     */
    referenceId?: Guid;
}
export function createAccountDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAccountDto;
}
export function createAccountSummaryDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAccountSummaryDto;
}
export function createAccountTransactionDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAccountTransactionDto;
}
export function createExceptionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExceptionResponse;
}
export function createTransactionDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTransactionDto;
}
export function createUpdateTransactionCategoryCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUpdateTransactionCategoryCommand;
}
export function deserializeIntoAccountDto(accountDto: AccountDto | undefined = {} as AccountDto) : Record<string, (node: ParseNode) => void> {
    return {
        "fullName": n => { accountDto.fullName = n.getStringValue(); },
        "referenceId": n => { accountDto.referenceId = n.getGuidValue(); },
    }
}
export function deserializeIntoAccountSummaryDto(accountSummaryDto: AccountSummaryDto | undefined = {} as AccountSummaryDto) : Record<string, (node: ParseNode) => void> {
    return {
        "fullName": n => { accountSummaryDto.fullName = n.getStringValue(); },
        "totalAmountSpent": n => { accountSummaryDto.totalAmountSpent = n.getNumberValue(); },
        "transactions": n => { accountSummaryDto.transactions = n.getCollectionOfObjectValues<AccountTransactionDto>(createAccountTransactionDtoFromDiscriminatorValue); },
    }
}
export function deserializeIntoAccountTransactionDto(accountTransactionDto: AccountTransactionDto | undefined = {} as AccountTransactionDto) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { accountTransactionDto.amount = n.getNumberValue(); },
        "category": n => { accountTransactionDto.category = n.getStringValue(); },
        "createdAt": n => { accountTransactionDto.createdAt = n.getDateValue(); },
        "referenceId": n => { accountTransactionDto.referenceId = n.getGuidValue(); },
    }
}
export function deserializeIntoExceptionResponse(exceptionResponse: ExceptionResponse | undefined = {} as ExceptionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { exceptionResponse.code = n.getNumberValue(); },
    }
}
export function deserializeIntoTransactionDto(transactionDto: TransactionDto | undefined = {} as TransactionDto) : Record<string, (node: ParseNode) => void> {
    return {
        "account": n => { transactionDto.account = n.getObjectValue<AccountDto>(createAccountDtoFromDiscriminatorValue); },
        "amount": n => { transactionDto.amount = n.getNumberValue(); },
        "category": n => { transactionDto.category = n.getStringValue(); },
        "createdAt": n => { transactionDto.createdAt = n.getDateValue(); },
        "referenceId": n => { transactionDto.referenceId = n.getGuidValue(); },
    }
}
export function deserializeIntoUpdateTransactionCategoryCommand(updateTransactionCategoryCommand: UpdateTransactionCategoryCommand | undefined = {} as UpdateTransactionCategoryCommand) : Record<string, (node: ParseNode) => void> {
    return {
        "category": n => { updateTransactionCategoryCommand.category = n.getStringValue(); },
    }
}
export interface ExceptionResponse extends ApiError, Parsable {
    /**
     * The code property
     */
    code?: number;
}
export function serializeAccountDto(writer: SerializationWriter, accountDto: AccountDto | undefined = {} as AccountDto) : void {
    writer.writeStringValue("fullName", accountDto.fullName);
    writer.writeGuidValue("referenceId", accountDto.referenceId);
}
export function serializeAccountSummaryDto(writer: SerializationWriter, accountSummaryDto: AccountSummaryDto | undefined = {} as AccountSummaryDto) : void {
    writer.writeStringValue("fullName", accountSummaryDto.fullName);
    writer.writeNumberValue("totalAmountSpent", accountSummaryDto.totalAmountSpent);
    writer.writeCollectionOfObjectValues<AccountTransactionDto>("transactions", accountSummaryDto.transactions, serializeAccountTransactionDto);
}
export function serializeAccountTransactionDto(writer: SerializationWriter, accountTransactionDto: AccountTransactionDto | undefined = {} as AccountTransactionDto) : void {
    writer.writeNumberValue("amount", accountTransactionDto.amount);
    writer.writeStringValue("category", accountTransactionDto.category);
    writer.writeDateValue("createdAt", accountTransactionDto.createdAt);
    writer.writeGuidValue("referenceId", accountTransactionDto.referenceId);
}
export function serializeExceptionResponse(writer: SerializationWriter, exceptionResponse: ExceptionResponse | undefined = {} as ExceptionResponse) : void {
    writer.writeNumberValue("code", exceptionResponse.code);
}
export function serializeTransactionDto(writer: SerializationWriter, transactionDto: TransactionDto | undefined = {} as TransactionDto) : void {
    writer.writeObjectValue<AccountDto>("account", transactionDto.account, serializeAccountDto);
    writer.writeNumberValue("amount", transactionDto.amount);
    writer.writeStringValue("category", transactionDto.category);
    writer.writeDateValue("createdAt", transactionDto.createdAt);
    writer.writeGuidValue("referenceId", transactionDto.referenceId);
}
export function serializeUpdateTransactionCategoryCommand(writer: SerializationWriter, updateTransactionCategoryCommand: UpdateTransactionCategoryCommand | undefined = {} as UpdateTransactionCategoryCommand) : void {
    writer.writeStringValue("category", updateTransactionCategoryCommand.category);
}
export interface TransactionDto extends Parsable {
    /**
     * The account property
     */
    account?: AccountDto;
    /**
     * The amount property
     */
    amount?: number;
    /**
     * The category property
     */
    category?: string;
    /**
     * The createdAt property
     */
    createdAt?: Date;
    /**
     * The referenceId property
     */
    referenceId?: Guid;
}
export interface UpdateTransactionCategoryCommand extends Parsable {
    /**
     * The category property
     */
    category?: string;
}
// tslint:enable
// eslint-enable
