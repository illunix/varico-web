// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createExceptionResponseFromDiscriminatorValue, deserializeIntoCreateTransactionCommand, deserializeIntoExceptionResponse, serializeCreateTransactionCommand, serializeExceptionResponse, type CreateTransactionCommand, type ExceptionResponse } from '../../../models/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /accounts/{accountReferenceId}/transactions
 */
export class TransactionsRequestBuilder extends BaseRequestBuilder<TransactionsRequestBuilder> {
    /**
     * Instantiates a new TransactionsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/accounts/{accountReferenceId}/transactions", (x, y) => new TransactionsRequestBuilder(x, y));
    }
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
    public post(body: CreateTransactionCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "400": createExceptionResponseFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    }
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: CreateTransactionCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeCreateTransactionCommand);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
