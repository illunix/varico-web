// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccountDtoFromDiscriminatorValue, createExceptionResponseFromDiscriminatorValue, deserializeIntoExceptionResponse, serializeExceptionResponse, type AccountDto, type ExceptionResponse } from '../models/';
import { WithAccountReferenceItemRequestBuilder } from './item/';
import { BaseRequestBuilder, getPathParameters, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /accounts
 */
export class AccountsRequestBuilder extends BaseRequestBuilder<AccountsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.accounts.item collection
     * @param accountReferenceId Unique identifier of the item
     * @returns a WithAccountReferenceItemRequestBuilder
     */
    public byAccountReferenceId(accountReferenceId: string) : WithAccountReferenceItemRequestBuilder {
        if(!accountReferenceId) throw new Error("accountReferenceId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["accountReferenceId"] = accountReferenceId
        return new WithAccountReferenceItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    /**
     * Instantiates a new AccountsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/accounts", (x, y) => new AccountsRequestBuilder(x, y));
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccountDto
     */
    public get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccountDto[] | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "400": createExceptionResponseFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendCollectionAsync<AccountDto>(requestInfo, createAccountDtoFromDiscriminatorValue, errorMapping);
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
